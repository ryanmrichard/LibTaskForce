#!/usr/bin/python
################################################################################
############  This script sets up an external directory for you, that ##########
############  is consistent with our build structure.  The relevant   ##########
############  CMakeLists.txt will also be created.  If at any time    ##########
############  any file or folder already exists creation aborts       ##########
############                                                          ##########
############  Syntax:                                                 ##########
############  AddExt.py <project-name>                                ##########
################################################################################
import sys,os

def MakeDir(Dir2Make):
   """
   Given the path to a directory, checks if it exists, and then, if it doesn't
   exist makes it.  An existing directory raises an exception.
   """
   print("Making: "+Dir2Make+"\n")
   if not os.path.isdir(Dir2Make):
      os.mkdir(Dir2Make)
   else:
      raise Exception("Directory: "+Dir2Make+" exists\n")

def MakeCMakeFile(Dir2Make):
   """
   Given a path to a directory returns a writable file object to a 
   CMakeLists.txt file in that directory.  Throws if the file exists.
   """
   FileName=os.path.join(Dir2Make,"CMakeLists.txt")
   if os.path.exists(FileName):
      raise Exception("File: "+FileName+" already exists")
   f=open(FileName,'w')
   return f

if(len(sys.argv)!=2):
  raise Exception("Usage: AddExt.py <project-name>\n")
PName=str(sys.argv[1])

#Path to project
ProjectDir=os.path.dirname(os.getcwd())

#Path to external project
Dir2Make=os.path.join(os.path.join(ProjectDir,"external"),PName)

#Path to external project source
SrcDir=os.path.join(Dir2Make,str(PName+"-source"))


#Make the directory structure
#MakeDir(Dir2Make)
#MakeDir(SrcDir)

PNameUp=PName.upper()
PNameLow=PName.lower()
CM1=MakeCMakeFile(Dir2Make)
CM1.write("################################################################################\n")
CM1.write("###                    This file autogenerated using AddExt.py               ###\n")
CM1.write("###                 For general modifications please edit AddExt.py          ###\n")
CM1.write("################################################################################\n")
CM1.write("include(ExternalProject)\n\n")
CM1.write("find_package("+PNameUp+" QUIET)\n\n")
CM1.write("if(NOT "+PNameUp+"_FOUND)\n")
CM1.write("   message(STATUS \"We will build "+PName+" for you\")\n")
CM1.write("ExternalProject_Add("+PNameLow+"_external\n")
CM1.write("   SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/"+PNameLow+"-source\n")
CM1.write("   CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}/external/"+PName+"\n")
CM1.write("   -DPYTHON_LIBRARY=${PYTHON_LIBRARY}\n")
CM1.write("   -DPYTHON_INCLUDE_DIR=${PYTHON_INCLUDE_DIR}\n")
CM1.write("   -DPYTHON_EXECUTABLE=${PYTHON_EXECUTABLE}\n")
CM1.write("   -DCMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS}\n")
CM1.write("   -DMPI_CXX_COMPILER=${MPI_CXX_COMPILER}\n")
CM1.write("   -DMPI_C_COMPILER=${MPI_C_COMPILER}\n")
CM1.write("   -DMPI_Fortran_COMPILER=${MPI_Fortran_COMPILER}\n")
CM1.write("   -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}\n")
CM1.write("   -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}\n")
CM1.write("   -DCMAKE_Fortran_COMPILER=${CMAKE_Fortran_COMPILER}\n")
CM1.write("   CMAKE_CACHE_ARGS -DLAPACK_LIBRARIES:STRING=${BPMODULE_MATH_LIBS}\n")
CM1.write("   INSTALL_COMMAND ${CMAKE_MAKE_PROGRAM} install DESTDIR=${CMAKE_BINARY_DIR}/stage\n")
CM1.write(")\n")
CM1.write("else()\n")
CM1.write("   add_library("+PNameLow+"_external INTERFACE)\n")
CM1.write("endif()")
CM1.close()
